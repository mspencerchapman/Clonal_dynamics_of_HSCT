driver_mut_df$n_clonal_driver<-sapply(1:nrow(driver_mut_df),function(i) {
ancestor_nodes<-getAncestors(tree,node=driver_mut_df$node[i],type="all")
ancestral_drivers<-driver_mut_df%>%filter(node%in%ancestor_nodes)%>%pull(variant_ID)
n_driver=1+length(ancestral_drivers)
return(n_driver)
})
driver_mut_df$n_subclonal_driver<-sapply(1:nrow(driver_mut_df),function(i) {
daughter_nodes<-get_all_node_children(node=driver_mut_df$node[i],tree = tree)
daughter_drivers<-driver_mut_df%>%filter(node%in%daughter_nodes)%>%pull(variant_ID)
n_subclonal_driver<-length(daughter_drivers)
return(n_subclonal_driver)
})
cell_types_to_test=bulk_smry_all%>%filter(Pair==pair)%>%pull(cell_type)%>%unique()
pair_out<-lapply(cell_types_to_test,function(test_cell_type) {
Donor_tissueID=bulk_smry_all%>%filter(Pair==pair & cell_type==test_cell_type & individual_type=="Donor")%>%pull(tissueID)%>%unique()
Recip_tissueID=bulk_smry_all%>%filter(Pair==pair & cell_type==test_cell_type & individual_type=="Recipient")%>%pull(tissueID)%>%unique()
tissue_out<-lapply(1:nrow(driver_mut_df),function(i) {
if(driver_mut_df$Mut_type[i]=="SNV"|driver_mut_df$Mut_type[i]=="INDEL") {
mut_ref<-driver_mut_df$mut_ref[i]
R_post=post[[Recip_tissueID]]%>%filter(mutation_ID==mut_ref)%>%dplyr::select(-Node_assignment,-mutation_ID)%>%as.matrix()
D_post=post[[Donor_tissueID]]%>%filter(mutation_ID==mut_ref)%>%dplyr::select(-Node_assignment,-mutation_ID)%>%as.matrix()
} else if(driver_mut_df$Mut_type[i]=="CNA") {
mut_ref<-driver_mut_df$mut_ref[i]
#For CNAs, take the clonal fraction of the mid-point mutation of the branch
node<-driver_mut_df$node[i]
nmuts_node<-post[[Recip_tissueID]]%>%filter(Node_assignment==node)%>%nrow()
median_pos<-ceiling(nmuts_node/2)
#Determine the position of the midpoint mutation on recip/ donor branches
R.which.median<-post[[Recip_tissueID]]%>%filter(Node_assignment==node)%>%dplyr::select(-Node_assignment,-mutation_ID)%>%as.matrix()%>%apply(1,mean)%>%order()%>%.[median_pos]
D.which.median<-post[[Donor_tissueID]]%>%filter(Node_assignment==node)%>%dplyr::select(-Node_assignment,-mutation_ID)%>%as.matrix()%>%apply(1,mean)%>%order()%>%.[median_pos]
#Determine the actual midpoint mutation
R.which.mut<-post[[Recip_tissueID]]%>%filter(Node_assignment==node)%>%pull(mutation_ID)%>%.[R.which.median]
D.which.mut<-post[[Donor_tissueID]]%>%filter(Node_assignment==node)%>%pull(mutation_ID)%>%.[D.which.median]
#Use this to get a posterior of the clonal fractions in recipient and donor
R_post=post[[Recip_tissueID]]%>%filter(mutation_ID==R.which.mut)%>%dplyr::select(-Node_assignment,-mutation_ID)%>%as.matrix()
D_post=post[[Donor_tissueID]]%>%filter(mutation_ID==D.which.mut)%>%dplyr::select(-Node_assignment,-mutation_ID)%>%as.matrix()
}
log2FC=log2(R_post/D_post)
as.data.frame(quantile(log2FC,c(0.025,0.5,0.975)))%>%t()%>%
as.data.frame()%>%
dplyr::mutate(Pair=new_pair_names[pair],cell_type=test_cell_type,mut_ref=mut_ref,.before=1)%>%
dplyr::rename("lowerCI"=`2.5%`,"median"=`50%`,"upperCI"=`97.5%`)%>%
tibble::remove_rownames()
})%>%dplyr::bind_rows()
})%>%bind_rows()%>%
left_join(driver_mut_df%>%dplyr::select(mut_ref,node,clone_muts,clone_gene_muts,n_clonal_driver,n_subclonal_driver,variant_ID,Gene))
head(pair_out)
##Look at relative shifts of DRIVER MUTATION clonal fractions
driver_FC_df<-Map(res=all_targeted_res,tree=all.trees.cc.nodups,post=posterior_cell_fracs,pair=names(all_targeted_res),function(res,tree,post,pair) {
details_targ<-res$details_targ
driver_mut_df<-details_targ%>%filter(coding_change_chip=="Coding change mutation in driver")
if(pair=="Pair11") {
driver_mut_df<-bind_rows(driver_mut_df,Pair11_loss_of_Y_details)
}
driver_mut_df<-driver_mut_df%>%
filter(mut_ref%in%(annotated_drivers_df%>%filter(Decision%in%c("Oncogenic","Possible"))%>%pull(mut_ref))|grepl("LOY",mut_ref))
#Convert each single driver into the overall clone
driver_mut_df$clone_muts<-sapply(1:nrow(driver_mut_df),function(i) {
ancestor_nodes<-getAncestors(tree,node=driver_mut_df$node[i],type="all")
daughter_nodes<-get_all_node_children(node=driver_mut_df$node[i],tree = tree)
if(any(ancestor_nodes%in%driver_mut_df$node)) {
ancestral_drivers<-driver_mut_df%>%filter(node%in%ancestor_nodes)%>%pull(variant_ID)
clone_drivers<-paste0(driver_mut_df$variant_ID[i],"/ ",paste0(ancestral_drivers,collapse="/ "))
} else {
clone_drivers<-driver_mut_df$variant_ID[i]
}
if(any(daughter_nodes%in%driver_mut_df$node)) {
daughter_drivers<-driver_mut_df%>%filter(node%in%daughter_nodes)%>%pull(variant_ID)
clone_drivers<-paste0(clone_drivers," (",paste0(daughter_drivers,collapse=", "),")")
}
return(clone_drivers)
})
driver_mut_df$clone_gene_muts<-sapply(1:nrow(driver_mut_df),function(i) {
ancestor_nodes<-getAncestors(tree,node=driver_mut_df$node[i],type="all")
daughter_nodes<-get_all_node_children(node=driver_mut_df$node[i],tree = tree)
if(any(ancestor_nodes%in%driver_mut_df$node)) {
ancestral_drivers<-driver_mut_df%>%filter(node%in%ancestor_nodes)%>%pull(Gene)
clone_drivers<-paste0(driver_mut_df$Gene[i],"/ ",paste0(ancestral_drivers,collapse="/ "))
} else {
clone_drivers<-driver_mut_df$Gene[i]
}
if(any(daughter_nodes%in%driver_mut_df$node)) {
daughter_drivers<-driver_mut_df%>%filter(node%in%daughter_nodes)%>%pull(Gene)
clone_drivers<-paste0(clone_drivers," (",paste0(daughter_drivers,collapse=", "),")")
}
return(clone_drivers)
})
driver_mut_df$n_clonal_driver<-sapply(1:nrow(driver_mut_df),function(i) {
ancestor_nodes<-getAncestors(tree,node=driver_mut_df$node[i],type="all")
ancestral_drivers<-driver_mut_df%>%filter(node%in%ancestor_nodes)%>%pull(variant_ID)
n_driver=1+length(ancestral_drivers)
return(n_driver)
})
driver_mut_df$n_subclonal_driver<-sapply(1:nrow(driver_mut_df),function(i) {
daughter_nodes<-get_all_node_children(node=driver_mut_df$node[i],tree = tree)
daughter_drivers<-driver_mut_df%>%filter(node%in%daughter_nodes)%>%pull(variant_ID)
n_subclonal_driver<-length(daughter_drivers)
return(n_subclonal_driver)
})
cell_types_to_test=bulk_smry_all%>%filter(Pair==pair)%>%pull(cell_type)%>%unique()
pair_out<-lapply(cell_types_to_test,function(test_cell_type) {
Donor_tissueID=bulk_smry_all%>%filter(Pair==pair & cell_type==test_cell_type & individual_type=="Donor")%>%pull(tissueID)%>%unique()
Recip_tissueID=bulk_smry_all%>%filter(Pair==pair & cell_type==test_cell_type & individual_type=="Recipient")%>%pull(tissueID)%>%unique()
tissue_out<-lapply(1:nrow(driver_mut_df),function(i) {
if(driver_mut_df$Mut_type[i]=="SNV"|driver_mut_df$Mut_type[i]=="INDEL") {
mut_ref<-driver_mut_df$mut_ref[i]
R_post=post[[Recip_tissueID]]%>%filter(mutation_ID==mut_ref)%>%dplyr::select(-Node_assignment,-mutation_ID)%>%as.matrix()
D_post=post[[Donor_tissueID]]%>%filter(mutation_ID==mut_ref)%>%dplyr::select(-Node_assignment,-mutation_ID)%>%as.matrix()
} else if(driver_mut_df$Mut_type[i]=="CNA") {
mut_ref<-driver_mut_df$mut_ref[i]
#For CNAs, take the clonal fraction of the mid-point mutation of the branch
node<-driver_mut_df$node[i]
nmuts_node<-post[[Recip_tissueID]]%>%filter(Node_assignment==node)%>%nrow()
median_pos<-ceiling(nmuts_node/2)
#Determine the position of the midpoint mutation on recip/ donor branches
R.which.median<-post[[Recip_tissueID]]%>%filter(Node_assignment==node)%>%dplyr::select(-Node_assignment,-mutation_ID)%>%as.matrix()%>%apply(1,mean)%>%order()%>%.[median_pos]
D.which.median<-post[[Donor_tissueID]]%>%filter(Node_assignment==node)%>%dplyr::select(-Node_assignment,-mutation_ID)%>%as.matrix()%>%apply(1,mean)%>%order()%>%.[median_pos]
#Determine the actual midpoint mutation
R.which.mut<-post[[Recip_tissueID]]%>%filter(Node_assignment==node)%>%pull(mutation_ID)%>%.[R.which.median]
D.which.mut<-post[[Donor_tissueID]]%>%filter(Node_assignment==node)%>%pull(mutation_ID)%>%.[D.which.median]
#Use this to get a posterior of the clonal fractions in recipient and donor
R_post=post[[Recip_tissueID]]%>%filter(mutation_ID==R.which.mut)%>%dplyr::select(-Node_assignment,-mutation_ID)%>%as.matrix()
D_post=post[[Donor_tissueID]]%>%filter(mutation_ID==D.which.mut)%>%dplyr::select(-Node_assignment,-mutation_ID)%>%as.matrix()
}
log2FC=log2(R_post/D_post)
as.data.frame(quantile(log2FC,c(0.025,0.5,0.975)))%>%t()%>%
as.data.frame()%>%
dplyr::mutate(Pair=new_pair_names[pair],cell_type=test_cell_type,mut_ref=mut_ref,.before=1)%>%
dplyr::rename("lowerCI"=`2.5%`,"median"=`50%`,"upperCI"=`97.5%`)%>%
tibble::remove_rownames()
})%>%dplyr::bind_rows()
})%>%bind_rows()%>%
left_join(driver_mut_df%>%dplyr::select(mut_ref,node,clone_muts,clone_gene_muts,n_clonal_driver,n_subclonal_driver,variant_ID,Gene))
return(pair_out)
})%>%dplyr::bind_rows()%>%
mutate(Pair=factor(Pair,levels=new_pair_names))
head(relative_output_df)
relative_output_df%>%
mutate(id=paste(Pair,node,sep="_"))%>%head()
head(driver_FC_df)
relative_output_df%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
mutate(id=paste(Pair,node,sep="_"))%>%head()
relative_output_df%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
mutate(id=paste(Pair,node,sep="_"))%>%
left_join(driver_FC_df%>%mutate(id=paste(Pair,"node",node,sep="_")),by="id")%>%head()
relative_output_df%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
mutate(id=paste(Pair,node,sep="_"))%>%
left_join(driver_FC_df%>%mutate(id=paste(Pair,"node",node,sep="_")),by="id")%>%View()
relative_output_df%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
mutate(id=paste(Pair,node,sep="_"))%>%
left_join(driver_FC_df%>%mutate(id=paste(Pair,"node",node,sep="_")),by="id")%>%
filter(cell_type%in%c("B_cells","T_cells","Monocytes"))%>%View()
relative_output_df%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
mutate(id=paste(Pair,node,sep="_"))%>%
left_join(driver_FC_df%>%mutate(id=paste(Pair,"node",node,sep="_")),by="id")%>%View()
relative_output_df%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
mutate(id=paste(Pair,node,sep="_"))%>%
left_join(driver_FC_df%>%mutate(id=paste(Pair,"node",node,sep="_"))%>%dplyr::select(id,clone_muts,clone_gene_muts),by="id")%>%View()
filter(cell_type%in%c("B_cells","T_cells","Monocytes"))%>%View()
relative_output_df%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
mutate(id=paste(Pair,node,sep="_"))%>%
left_join(driver_FC_df%>%mutate(id=paste(Pair,"node",node,sep="_"))%>%dplyr::select(id,clone_muts,clone_gene_muts),by="id")%>%
filter(cell_type%in%c("B_cells","T_cells","Monocytes"))%>%View()
relative_output_df%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
mutate(id=paste(Pair,node,sep="_"))%>%
left_join(driver_FC_df%>%mutate(id=paste(Pair,"node",node,sep="_"))%>%dplyr::select(id,clone_muts,clone_gene_muts),by="id")%>%
filter(cell_type%in%c("B_cells","T_cells","Monocytes"))%>%
pivot_wider(id_cols = c("Pair","node","individual_type"),names_from="cell_type",values_from="cell_frac")%>%View()
relative_output_df%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
mutate(id=paste(Pair,node,sep="_"))%>%
left_join(driver_FC_df%>%mutate(id=paste(Pair,"node",node,sep="_"))%>%dplyr::select(id,clone_muts,clone_gene_muts),by="id")%>%
filter(cell_type%in%c("B_cells","T_cells","Monocytes"))%>%
pivot_wider(id_cols = c("Pair","node","individual_type","clone_muts","clone_gene_muts"),names_from="cell_type",values_from="cell_frac")%>%View()
relative_output_df_enhanced%>%
mutate(BM_ratio=B_cells/Monocytes)%>%
filter(B_cells>threshold|Monocytes>threshold)%>%
mutate(bias=ifelse(BM_ratio<1,"Myeloid-bias","B-lymphoid bias"))%>%
dplyr::count(Pair,individual_type,bias)%>%
tidyr::complete(Pair,individual_type,bias,fill=list(n=0))%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
ggplot(aes(x=Pair,y=n,fill=bias))+
geom_bar(stat="identity",position="dodge")+
facet_grid(~individual_type)+
theme_classic()+
my_theme+
labs(x="",y="Number of clone",fill="Clone bias")
relative_output_df_enhanced<-relative_output_df%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
mutate(id=paste(Pair,node,sep="_"))%>%
left_join(driver_FC_df%>%mutate(id=paste(Pair,"node",node,sep="_"))%>%dplyr::select(id,clone_muts,clone_gene_muts),by="id")%>%
filter(cell_type%in%c("B_cells","T_cells","Monocytes"))%>%
pivot_wider(id_cols = c("Pair","node","individual_type","clone_muts","clone_gene_muts"),names_from="cell_type",values_from="cell_frac")
relative_output_df_enhanced%>%
mutate(BM_ratio=B_cells/Monocytes)%>%
filter(B_cells>threshold|Monocytes>threshold)%>%
mutate(bias=ifelse(BM_ratio<1,"Myeloid-bias","B-lymphoid bias"))%>%
dplyr::count(individual_type,bias)%>%
tidyr::complete(individual_type,bias,fill=list(n=0))
relative_output_df_enhanced<-relative_output_df%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
mutate(id=paste(Pair,node,sep="_"))%>%
left_join(driver_FC_df%>%mutate(id=paste(Pair,"node",node,sep="_"))%>%dplyr::select(id,clone_muts,clone_gene_muts),by="id")%>%
filter(cell_type%in%c("B_cells","T_cells","Monocytes"))%>%
pivot_wider(id_cols = c("Pair","node","individual_type","clone_muts","clone_gene_muts"),names_from="cell_type",values_from="cell_frac")
relative_output_df%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
mutate(id=paste(Pair,node,sep="_"))%>%
left_join(driver_FC_df%>%mutate(id=paste(Pair,"node",node,sep="_"))%>%dplyr::select(id,clone_muts,clone_gene_muts),by="id")%>%
filter(cell_type%in%c("B_cells","T_cells","Monocytes"))%>%View()
relative_output_df_enhanced<-relative_output_df%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
mutate(id=paste(Pair,node,sep="_"))%>%
left_join(driver_FC_df%>%mutate(id=paste(Pair,"node",node,sep="_"))%>%dplyr::select(id,clone_muts,clone_gene_muts),by="id")%>%
filter(cell_type%in%c("B_cells","T_cells","Monocytes"))%>%
filter(!duplicated(.))%>%
pivot_wider(id_cols = c("Pair","node","individual_type","clone_muts","clone_gene_muts"),names_from="cell_type",values_from="cell_frac")
relative_output_df_enhanced%>%
mutate(BM_ratio=B_cells/Monocytes)%>%
filter(B_cells>threshold|Monocytes>threshold)%>%
mutate(bias=ifelse(BM_ratio<1,"Myeloid-bias","B-lymphoid bias"))%>%
dplyr::count(individual_type,bias)%>%
tidyr::complete(individual_type,bias,fill=list(n=0))
relative_output_df_enhanced%>%
mutate(BM_ratio=B_cells/Monocytes)%>%
filter(B_cells>threshold|Monocytes>threshold)%>%
mutate(bias=ifelse(BM_ratio<1,"Myeloid-bias","B-lymphoid bias"))%>%
dplyr::count(individual_type,bias)%>%
tidyr::complete(individual_type,bias,fill=list(n=0))
relative_output_df_enhanced%>%
mutate(BM_ratio=B_cells/Monocytes)%>%
filter(B_cells>threshold|Monocytes>threshold)%>%
mutate(bias=ifelse(BM_ratio<1,"Myeloid-bias","B-lymphoid bias"))%>%
dplyr::count(Pair,individual_type,bias)%>%
tidyr::complete(Pair,individual_type,bias,fill=list(n=0))%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
ggplot(aes(x=Pair,y=n,fill=bias))+
geom_bar(stat="identity",position="dodge")+
facet_grid(~individual_type)+
theme_classic()+
my_theme+
labs(x="",y="Number of clone",fill="Clone bias")
relative_output_df%>%
filter(cell_type%in%c("B_cells","T_cells","Monocytes"))%>%
pivot_wider(id_cols = c("Pair","node","individual_type"),names_from="cell_type",values_from="cell_frac")%>%
mutate(BM_ratio=B_cells/Monocytes)%>%
filter(B_cells>threshold|Monocytes>threshold)%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%View()
relative_output_df_enhanced%>%
mutate(BM_ratio=B_cells/Monocytes)%>%
filter(B_cells>threshold|Monocytes>threshold)%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%View()
B_myeloid_output_comparison_plot<-relative_output_df_enhanced%>%
mutate(BM_ratio=B_cells/Monocytes)%>%
filter(B_cells>threshold|Monocytes>threshold)%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
ggplot(aes(x=B_cells,y=Monocytes,col=Pair,label=clone_gene_muts))+
geom_point(alpha=0.5)+
scale_x_log10(limits=c(0.005,1))+
scale_y_log10(limits=c(0.005,1))+
geom_abline(linetype=2)+
facet_grid(~individual_type)+
ggrepe::geom_label_repel()+
scale_color_manual(values=Pair_cols,drop=T)+
theme_bw()+
my_theme+
labs(x="B cell clonal fraction",y="Monocyte clonal fraction")
B_myeloid_output_comparison_plot<-relative_output_df_enhanced%>%
mutate(BM_ratio=B_cells/Monocytes)%>%
filter(B_cells>threshold|Monocytes>threshold)%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
ggplot(aes(x=B_cells,y=Monocytes,col=Pair,label=clone_gene_muts))+
geom_point(alpha=0.5)+
scale_x_log10(limits=c(0.005,1))+
scale_y_log10(limits=c(0.005,1))+
geom_abline(linetype=2)+
facet_grid(~individual_type)+
ggrepel::geom_label_repel()+
scale_color_manual(values=Pair_cols,drop=T)+
theme_bw()+
my_theme+
labs(x="B cell clonal fraction",y="Monocyte clonal fraction")
B_myeloid_output_comparison_plot
B_myeloid_output_comparison_plot<-relative_output_df_enhanced%>%
mutate(BM_ratio=B_cells/Monocytes)%>%
filter(B_cells>threshold|Monocytes>threshold)%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
ggplot(aes(x=B_cells,y=Monocytes,col=Pair,label=clone_gene_muts))+
geom_point(alpha=0.5)+
scale_x_log10(limits=c(0.005,1))+
scale_y_log10(limits=c(0.005,1))+
geom_abline(linetype=2)+
facet_grid(~individual_type)+
ggrepel::geom_label_repel(size=1)+
scale_color_manual(values=Pair_cols,drop=T)+
theme_bw()+
my_theme+
labs(x="B cell clonal fraction",y="Monocyte clonal fraction")
B_myeloid_output_comparison_plot
SOF_plot_Tcell_only<-all_sof%>%
dplyr::bind_rows()%>%
left_join(bulk_smry_all%>%dplyr::select(Pair_new,tissueID,individual_type,cell_type),by="tissueID")%>%
dplyr::mutate(cell_type=factor(cell_type,levels=c("Granulocytes","Monocytes","B_cells","T_cells")),
individual_type=factor(individual_type))%>%
dplyr::mutate(Pair_new=factor(Pair_new,levels=paste("Pair",1:10,sep="_")))%>%
dplyr::filter(cell_type=="T_cells")%>%
ggplot(aes(ymin=lowerCI,ymax=upperCI,y=median,x=cutoff,col=individual_type,fill=individual_type))+
geom_hline(yintercept = 1,linetype=2)+
geom_ribbon(alpha=0.4,col=NA)+
geom_line(size=0.3)+
facet_grid(Pair_new~cell_type)+
scale_y_continuous(breaks=seq(0,1,0.5),limits=c(0,1))+
scale_fill_manual(values=remove_names(DorR_cols))+
scale_color_manual(values=remove_names(DorR_cols))+
theme_bw()+
my_theme+
labs(x="Molecular time",y="Captured cell fraction")
SOF_plot_Tcell_only
SOF_plot_Tcell_only<-all_sof%>%
dplyr::bind_rows()%>%
left_join(bulk_smry_all%>%dplyr::select(Pair_new,tissueID,individual_type,cell_type),by="tissueID")%>%
dplyr::mutate(cell_type=factor(cell_type,levels=c("Granulocytes","Monocytes","B_cells","T_cells")),
individual_type=factor(individual_type))%>%
dplyr::mutate(Pair_new=factor(Pair_new,levels=paste("Pair",1:10,sep="_")))%>%
dplyr::filter(cell_type=="T_cells")%>%
ggplot(aes(ymin=lowerCI,ymax=upperCI,y=median,x=cutoff,col=individual_type,fill=individual_type))+
geom_hline(yintercept = 1,linetype=2)+
geom_ribbon(alpha=0.4,col=NA)+
geom_line(size=0.3)+
facet_grid(cell_type~Pair_new)+
scale_y_continuous(breaks=seq(0,1,0.5),limits=c(0,1))+
scale_fill_manual(values=remove_names(DorR_cols))+
scale_color_manual(values=remove_names(DorR_cols))+
theme_bw()+
my_theme+
labs(x="Molecular time",y="Captured cell fraction")
SOF_plot_Tcell_only
ggsave(filename=paste0(plots_dir,"Sum_of_frac_through_time_Tcell_only.pdf"),SOF_plot_Tcell_only,width=6,height=2)
ggsave(filename=paste0(plots_dir,"Sum_of_frac_through_time_Tcell_only.pdf"),SOF_plot_Tcell_only,width=7,height=2)
B_myeloid_output_comparison_plot<-relative_output_df_enhanced%>%
mutate(BM_ratio=B_cells/Monocytes)%>%
filter(B_cells>threshold|Monocytes>threshold)%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
ggplot(aes(x=B_cells,y=Monocytes,col=Pair))+
geom_point(alpha=0.5)+
scale_x_log10(limits=c(0.005,1))+
scale_y_log10(limits=c(0.005,1))+
geom_abline(linetype=2)+
facet_grid(~individual_type)+
scale_color_manual(values=Pair_cols,drop=T)+
theme_bw()+
my_theme+
labs(x="B cell clonal fraction",y="Monocyte clonal fraction")
B_myeloid_output_comparison_plot
ggsave(paste0(plots_dir,"B_myeloid_output_comparison_plot.pdf"),B_myeloid_output_comparison_plot,width=6,height=2)
B_myeloid_output_comparison_plot<-relative_output_df_enhanced%>%
mutate(BM_ratio=B_cells/Monocytes)%>%
filter(B_cells>threshold|Monocytes>threshold)%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
ggplot(aes(x=B_cells,y=Monocytes,col=Pair))+
geom_point(alpha=0.5)+
scale_x_log10(limits=c(0.005,1))+
scale_y_log10(limits=c(0.005,1))+
geom_abline(linetype=2)+
facet_grid(~individual_type)+
scale_color_manual(values=Pair_cols,drop=T)+
theme_bw()+
my_theme+
labs(x="B cell clonal fraction",y="Monocyte clonal fraction")+
theme(legend.key.size = unit(3,"mm"))
ggsave(paste0(plots_dir,"B_myeloid_output_comparison_plot.pdf"),B_myeloid_output_comparison_plot,width=6,height=2)
ggsave(paste0(plots_dir,"B_myeloid_output_comparison_plot.pdf"),B_myeloid_output_comparison_plot,width=5.5,height=2.2)
T_myeloid_output_comparison_plot<-relative_output_df_enhanced%>%
mutate(BM_ratio=T_cells/Monocytes)%>%
filter(T_cells>threshold|Monocytes>threshold)%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
ggplot(aes(x=T_cells,y=Monocytes,col=Pair))+
geom_point(alpha=0.5)+
scale_x_log10(limits=c(0.005,1))+
scale_y_log10(limits=c(0.005,1))+
geom_abline(linetype=2)+
facet_grid(~individual_type)+
scale_color_manual(values=Pair_cols,drop=T)+
theme_bw()+
my_theme+
labs(x="T cell clonal fraction",y="Monocyte clonal fraction")+
theme(legend.key.size = unit(3,"mm"))
T_myeloid_output_comparison_plot
ggsave(paste0(plots_dir,"T_myeloid_output_comparison_plot.pdf"),T_myeloid_output_comparison_plot,width=5.5,height=2.2)
Tcell_fraction_simulation_plot<-all_stats%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
filter(Pair%in%paste("Pair",c(3,6,7,8,9,10),sep="_") & Myeloid>0.05)%>%
ggplot(aes(x=T_cell_clone_duration,y=`T/M_ratio`))+
geom_bin2d(bins = 70) +
scale_fill_continuous(type = "viridis") +
geom_smooth(method="lm",col="black",fullrange=T)+
theme_bw()+
my_theme+
facet_wrap(~Pair,nrow=2)+
geom_hline(yintercept=1)+
annotate(geom="rect", xmin = 8, xmax = 15, ymin = 0, ymax = 2,alpha = .2)+
scale_x_continuous(limits=c(0,20))+
scale_y_continuous(limits=c(0,1.2),breaks=seq(0,2,0.2))+
labs(x="Simulated lifespan of T cell clones\n(Average T cell age at sampling is half of this)",
y="Expanded clone T-cell fraction/\nExpanded clone myeloid fraction")
ggsave(filename = paste0(plots_dir,"Tcell_fraction_simulation_plot.pdf"),Tcell_fraction_simulation_plot,device = "pdf",width=6,height = 3)
setwd(paste0(root_dir,"/data/ABC_simulation_results/Tcell_fraction_simulations/"))
#setwd("/lustre/scratch119/casm/team154pc/ms56/Zur_HSCT/ABC_models/ABC_Tcell_duration")
#Now extract the parameters/ summary statistics and run the ABC
all_stats<-lapply(Pair_metadata%>%filter(Pair!="Pair21")%>%pull(Pair),function(pair){
cat(pair,sep="\n")
sim.files=list.files(path=pair,pattern=".Rds",full.names = T)
params_file=paste0("all_params_",pair,".Rds")
sumstats_file=paste0("all_sumstats_",pair,".Rds")
if(file.exists(params_file) & file.exists(sumstats_file)){
cat("Reading in saved files",sep="\n\n")
params<-readRDS(params_file)
sumstats<-readRDS(sumstats_file)
} else {
cat("Importing individual results files and concatenating",sep="\n\n")
sim.output<-lapply(sim.files,function(file) {if(which(sim.files==file)%%100 == 0) {print(which(sim.files==file))};readRDS(file)})
params<-lapply(sim.output,function(res) unlist(res$params))%>%dplyr::bind_rows()%>%mutate(idx=1:length(sim.output))
sumstats<-lapply(1:length(sim.output),function(i) {df<-sim.output[[i]]$ratios%>%mutate(idx=i);return(df)})%>%dplyr::bind_rows()
#temp<-lapply(1:length(sim.output),function(i) if(is.null(sim.output[[i]]$ratios)){print(i)})
saveRDS(params,file=params_file)
saveRDS(sumstats,file=sumstats_file)
}
df<-left_join(params,sumstats,by="idx")%>%mutate(Pair=pair)
return(df)
})%>%bind_rows()
Tcell_fraction_simulation_plot<-all_stats%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
filter(Pair%in%paste("Pair",c(3,6,7,8,9,10),sep="_") & Myeloid>0.05)%>%
ggplot(aes(x=T_cell_clone_duration,y=`T/M_ratio`))+
geom_bin2d(bins = 70) +
scale_fill_continuous(type = "viridis") +
geom_smooth(method="lm",col="black",fullrange=T)+
theme_bw()+
my_theme+
facet_wrap(~Pair,nrow=2)+
geom_hline(yintercept=1)+
annotate(geom="rect", xmin = 8, xmax = 15, ymin = 0, ymax = 2,alpha = .2)+
scale_x_continuous(limits=c(0,20))+
scale_y_continuous(limits=c(0,1.2),breaks=seq(0,2,0.2))+
labs(x="Simulated lifespan of T cell clones\n(Average T cell age at sampling is half of this)",
y="Expanded clone T-cell fraction/\nExpanded clone myeloid fraction")
ggsave(filename = paste0(plots_dir,"Tcell_fraction_simulation_plot.pdf"),Tcell_fraction_simulation_plot,device = "pdf",width=6,height = 3)
Tcell_fraction_simulation_plot<-all_stats%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
filter(Pair%in%paste("Pair",c(3,6,7,8,9,10),sep="_") & Myeloid>0.05)%>%
ggplot(aes(x=T_cell_clone_duration,y=`T/M_ratio`))+
geom_bin2d(bins = 70) +
scale_fill_continuous(type = "viridis") +
geom_smooth(method="lm",col="black",fullrange=T)+
theme_bw()+
my_theme+
facet_wrap(~Pair,nrow=2)+
geom_hline(yintercept=1,linetype=2)+
annotate(geom="rect", xmin = 8, xmax = 15, ymin = 0, ymax = 2,alpha = .2)+
scale_x_continuous(limits=c(0,20))+
scale_y_continuous(limits=c(0,1.2),breaks=seq(0,2,0.2))+
labs(x="Simulated lifespan of T cell clones\n(Average T cell age at sampling is half of this)",
y="Expanded clone T-cell fraction/\nExpanded clone myeloid fraction")
ggsave(filename = paste0(plots_dir,"Tcell_fraction_simulation_plot.pdf"),Tcell_fraction_simulation_plot,device = "pdf",width=6,height = 3)
ggsave(paste0(plots_dir,"T_myeloid_output_comparison_plot.pdf"),T_myeloid_output_comparison_plot,width=5.5,height=2)
ggsave(paste0(plots_dir,"B_myeloid_output_comparison_plot.pdf"),B_myeloid_output_comparison_plot,width=5.5,height=2)
ggsave(paste0(plots_dir,"B_myeloid_output_comparison_plot.pdf"),B_myeloid_output_comparison_plot,width=5,height=1.8)
ggsave(paste0(plots_dir,"T_myeloid_output_comparison_plot.pdf"),T_myeloid_output_comparison_plot,width=5,height=1.8)
Tcell_fraction_simulation_plot
Tcell_fraction_simulation_plot<-all_stats%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
filter(Pair%in%paste("Pair",c(3,6,7,8,9,10),sep="_") & Myeloid>0.05)%>%
ggplot(aes(x=T_cell_clone_duration,y=`T/M_ratio`))+
geom_bin2d(bins = 70) +
scale_fill_continuous(type = "viridis") +
geom_smooth(method="lm",col="black",fullrange=T)+
theme_bw()+
my_theme+
facet_wrap(~Pair,nrow=2)+
geom_hline(yintercept=1,linetype=2)+
annotate(geom="rect", xmin = 8, xmax = 15, ymin = 0, ymax = 1.22,alpha = .2)+
scale_x_continuous(limits=c(0,20))+
scale_y_continuous(limits=c(0,1.2),breaks=seq(0,2,0.2))+
labs(x="Simulated lifespan of T cell clones\n(Average T cell age at sampling is half of this)",
y="Expanded clone T-cell fraction/\nExpanded clone myeloid fraction")
Tcell_fraction_simulation_plot
Tcell_fraction_simulation_plot<-all_stats%>%
mutate(Pair=factor(new_pair_names[Pair],levels=paste("Pair",1:10,sep="_")))%>%
filter(Pair%in%paste("Pair",c(3,6,7,8,9,10),sep="_") & Myeloid>0.05)%>%
ggplot(aes(x=T_cell_clone_duration,y=`T/M_ratio`))+
geom_bin2d(bins = 70) +
scale_fill_continuous(type = "viridis") +
geom_smooth(method="lm",col="black",fullrange=T)+
theme_bw()+
my_theme+
facet_wrap(~Pair,nrow=2)+
geom_hline(yintercept=1,linetype=2)+
annotate(geom="rect", xmin = 8, xmax = 15, ymin = 0, ymax = 1.2,alpha = .2)+
scale_x_continuous(limits=c(0,20))+
scale_y_continuous(limits=c(0,1.2),breaks=seq(0,2,0.2))+
labs(x="Simulated lifespan of T cell clones\n(Average T cell age at sampling is half of this)",
y="Expanded clone T-cell fraction/\nExpanded clone myeloid fraction")
Tcell_fraction_simulation_plot
ggsave(filename = paste0(plots_dir,"Tcell_fraction_simulation_plot.pdf"),Tcell_fraction_simulation_plot,device = "pdf",width=6,height = 3)
